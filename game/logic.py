# Noitu/game/logic.py
import discord
from discord.ext import commands
import random
import asyncio
import traceback

from .. import database
from .. import wiktionary_api 
from .. import utils
from .. import config as bot_cfg
from .views import PostGameView


async def check_game_timeout(bot: commands.Bot, channel_id: int, guild_id: int, expected_last_player_id: int, expected_phrase_normalized: str): # expected_phrase_normalized l√† t·ª´ VN ho·∫∑c Hiragana c·ªßa JP
    if not bot.db_pool: return 

    timeout_seconds_for_guild, _ , game_lang = await utils.get_guild_game_settings(bot, guild_id) # L·∫•y c·∫£ game_lang
    # S·ª≠a: L·∫•y prefix t·ª´ DB thay v√¨ bot_cfg
    guild_cfg_for_prefix = await database.get_guild_config(bot.db_pool, guild_id)
    command_prefix_for_guild = guild_cfg_for_prefix.get("command_prefix", bot_cfg.DEFAULT_COMMAND_PREFIX) if guild_cfg_for_prefix else bot_cfg.DEFAULT_COMMAND_PREFIX


    countdown_message: discord.Message = None
    message_channel = bot.get_channel(channel_id)
    if not message_channel or not isinstance(message_channel, discord.TextChannel):
        if channel_id in bot.active_games: del bot.active_games[channel_id] 
        return

    # Hi·ªÉn th·ªã t·ª´ cho ph√π h·ª£p v·ªõi ng√¥n ng·ªØ
    display_phrase = expected_phrase_normalized.title() if game_lang == "VN" else expected_phrase_normalized

    initial_countdown_text_base = "" 
    if expected_last_player_id == bot.user.id:
        initial_countdown_text_base = f"‚è≥ Bot ƒë√£ ra t·ª´ \"**{display_phrase}**\". "
    else:
        try:
            winner_user_to_be = await bot.fetch_user(expected_last_player_id)
            initial_countdown_text_base = f"‚è≥ {winner_user_to_be.mention} ƒë√£ ra t·ª´ \"**{display_phrase}**\". "
        except discord.NotFound:
            initial_countdown_text_base = f"‚è≥ Ng∆∞·ªùi ch∆°i ID {expected_last_player_id} ƒë√£ ra t·ª´ \"**{display_phrase}**\". "
        except discord.HTTPException: 
            initial_countdown_text_base = f"‚è≥ M·ªôt ng∆∞·ªùi ch∆°i ƒë√£ ra t·ª´ \"**{display_phrase}**\". "

    try:
        countdown_message = await message_channel.send(f"{initial_countdown_text_base}Th·ªùi gian cho ng∆∞·ªùi ti·∫øp theo: {timeout_seconds_for_guild} gi√¢y.")
    except discord.HTTPException as e:
        print(f"L·ªói g·ª≠i msg ƒë·∫øm ng∆∞·ª£c: {e}")
        countdown_message = None

    time_slept = 0 
    edit_interval = 1 

    try:
        while time_slept < timeout_seconds_for_guild:
            await asyncio.sleep(min(edit_interval, timeout_seconds_for_guild - time_slept))
            time_slept += edit_interval

            if channel_id not in bot.active_games or not bot.active_games[channel_id]["active"]:
                if countdown_message: 
                    try: await countdown_message.delete()
                    except (discord.NotFound, discord.HTTPException): pass
                return

            game = bot.active_games[channel_id]
            # current_phrase_str gi·ªù l√† t·ª´ VN ho·∫∑c Hiragana chu·∫©n h√≥a
            if not (game.get("last_player_id") == expected_last_player_id and \
                    game.get("current_phrase_str") == expected_phrase_normalized):
                if countdown_message: 
                    try: await countdown_message.delete()
                    except (discord.NotFound, discord.HTTPException): pass
                return

            if countdown_message: 
                remaining_time = max(0, timeout_seconds_for_guild - time_slept)
                new_text = f"{initial_countdown_text_base}Th·ªùi gian cho ng∆∞·ªùi ti·∫øp theo: {remaining_time} gi√¢y."
                if remaining_time > 0 :
                    try: await countdown_message.edit(content=new_text)
                    except (discord.NotFound, discord.HTTPException): countdown_message = None

            if time_slept >= timeout_seconds_for_guild: break 

        # --- H·∫æT GI·ªú ---
        if countdown_message: 
            try: await countdown_message.delete()
            except (discord.NotFound, discord.HTTPException): pass

        if channel_id in bot.active_games and bot.active_games[channel_id]["active"]:
            game = bot.active_games[channel_id]
            if game.get("last_player_id") == expected_last_player_id and \
               game.get("current_phrase_str") == expected_phrase_normalized:

                winner_id = game["last_player_id"]
                
                # Hi·ªÉn th·ªã t·ª´ th·∫Øng cu·ªôc
                winning_phrase_display = ""
                if game_lang == "VN":
                    winning_phrase_display = " ".join(w.capitalize() for w in expected_phrase_normalized.split())
                else: # JP
                    # game["current_phrase_display_form"] ch·ª©a d·∫°ng Kanji/Hira g·ªëc m√† ng∆∞·ªùi ch∆°i ho·∫∑c bot ƒë√£ d√πng
                    winning_phrase_display = game.get("current_phrase_display_form", expected_phrase_normalized)


                win_embed = discord.Embed(color=discord.Color.gold())
                original_starter_for_view = winner_id 

                if winner_id == bot.user.id: 
                    win_embed.title = "‚è≥ H·∫øt Gi·ªù! ‚è≥"
                    win_embed.description = (
                        f"ƒê√£ h·∫øt {timeout_seconds_for_guild} gi√¢y! Kh√¥ng ai n·ªëi ƒë∆∞·ª£c t·ª´ \"**{winning_phrase_display}**\" c·ªßa Bot.\n"
                        f"Game k·∫øt th√∫c kh√¥ng c√≥ ng∆∞·ªùi th·∫Øng."
                    )
                    participants_list = list(game.get("participants_since_start", []))
                    original_starter_for_view = participants_list[0] if participants_list else bot.user.id
                else: 
                    winner_name_display = f"User ID {winner_id}" 
                    winner_avatar_url = None
                    try:
                        winner_user = await bot.fetch_user(winner_id)
                        winner_name_display = winner_user.name 
                        winner_avatar_url = winner_user.display_avatar.url
                        await database.update_stat(bot.db_pool, bot.user.id, winner_id, guild_id, "wins", winner_name_display)

                        for pid in game.get("participants_since_start", set()):
                            if pid != winner_id and pid != bot.user.id:
                                await database.reset_win_streak_for_user(bot.db_pool, pid, guild_id)

                        win_embed.title = f"üéâ Ch√∫c M·ª´ng {discord.utils.escape_markdown(winner_name_display)}! üéâ"
                        win_embed.description = (
                            f"{winner_user.mention} ƒë√£ chi·∫øn th·∫Øng!\n"
                            f"Kh√¥ng ai n·ªëi ti·∫øp ƒë∆∞·ª£c t·ª´ \"**{winning_phrase_display}**\" c·ªßa b·∫°n trong {timeout_seconds_for_guild} gi√¢y."
                        )
                        if winner_avatar_url: win_embed.set_thumbnail(url=winner_avatar_url)

                        user_stats = await database.get_user_stats_entry(bot.db_pool, winner_id, guild_id, winner_name_display)
                        if user_stats: 
                             win_embed.add_field(name="Th√†nh T√≠ch", value=f"Th·∫Øng: {user_stats['wins']} | Chu·ªói: {user_stats['current_win_streak']} (Max: {user_stats['max_win_streak']})", inline=False)
                        original_starter_for_view = winner_id
                    except discord.NotFound: 
                        await database.update_stat(bot.db_pool, bot.user.id, winner_id, guild_id, "wins", f"User ID {winner_id}")
                        win_embed.title = "üéâ Ng∆∞·ªùi Ch∆°i Th·∫Øng Cu·ªôc! üéâ"
                        win_embed.description = f"Ng∆∞·ªùi ch∆°i ID {winner_id} ƒë√£ th·∫Øng v·ªõi t·ª´ \"**{winning_phrase_display}**\"! (Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt)."
                    except discord.HTTPException: 
                         await database.update_stat(bot.db_pool, bot.user.id, winner_id, guild_id, "wins", f"User ID {winner_id} (API Err)")
                         win_embed.title = "üéâ M·ªôt Ng∆∞·ªùi Ch∆°i Th·∫Øng! üéâ"
                         win_embed.description = f"M·ªôt ng∆∞·ªùi ch∆°i ƒë√£ th·∫Øng v·ªõi t·ª´ \"**{winning_phrase_display}**\"! (L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i)."

                view = PostGameView(
                    channel=message_channel,
                    original_starter_id=original_starter_for_view,
                    command_prefix_for_guild=command_prefix_for_guild,
                    bot_instance=bot, 
                    internal_start_game_callable=internal_start_game 
                )
                msg_with_view = await message_channel.send(embed=win_embed, view=view)
                view.message_to_edit = msg_with_view 

                if channel_id in bot.active_games and \
                   bot.active_games[channel_id].get("last_player_id") == expected_last_player_id and \
                   bot.active_games[channel_id].get("current_phrase_str") == expected_phrase_normalized:
                    del bot.active_games[channel_id]

    except asyncio.CancelledError: 
        if countdown_message:
            try: await countdown_message.delete()
            except (discord.NotFound, discord.HTTPException): pass
    except Exception as e:
        print(f"L·ªói nghi√™m tr·ªçng trong check_game_timeout cho k√™nh {channel_id} (t·ª´: {expected_phrase_normalized}): {e}")
        traceback.print_exc()
        if countdown_message:
            try: await countdown_message.delete()
            except (discord.NotFound, discord.HTTPException): pass


async def internal_start_game(bot: commands.Bot, channel: discord.TextChannel, author: discord.User | discord.Member,
                              guild_id: int, start_phrase_input: str = None, interaction: discord.Interaction = None):
    async def send_response(msg_content: str, ephemeral_flag: bool = False):
        # ... (gi·ªØ nguy√™n)
        if interaction:
            if interaction.response.is_done(): # ƒê√£ defer/reply
                await interaction.followup.send(msg_content, ephemeral=ephemeral_flag)
            else:
                await interaction.response.send_message(msg_content, ephemeral=ephemeral_flag)
        else: # Context l·ªánh prefix
            await channel.send(msg_content, delete_after=15 if ephemeral_flag else None)


    if not bot.http_session or bot.http_session.closed:
        await send_response("‚ö†Ô∏è Bot ch∆∞a s·∫µn s√†ng (Session HTTP). Vui l√≤ng th·ª≠ l·∫°i sau gi√¢y l√°t.", ephemeral_flag=True)
        return
    if not bot.db_pool:
        await send_response("‚ö†Ô∏è Bot ch∆∞a s·∫µn s√†ng (K·∫øt n·ªëi Database). Vui l√≤ng th·ª≠ l·∫°i sau gi√¢y l√°t.", ephemeral_flag=True)
        return

    timeout_s, min_p, game_lang = await utils.get_guild_game_settings(bot, guild_id)
    if game_lang == "JP" and not bot.kakasi:
        await send_response("‚ö†Ô∏è Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu game Ti·∫øng Nh·∫≠t do bot ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng (PyKakasi).", ephemeral_flag=True)
        return
        
    guild_cfg_obj = await database.get_guild_config(bot.db_pool, guild_id)
    prefix = guild_cfg_obj.get("command_prefix", bot_cfg.DEFAULT_COMMAND_PREFIX) if guild_cfg_obj else bot_cfg.DEFAULT_COMMAND_PREFIX

    if channel.id in bot.active_games:
        existing_game_state = bot.active_games[channel.id]
        if existing_game_state.get("active", False):
            if "timeout_task" in existing_game_state and existing_game_state["timeout_task"] and not existing_game_state["timeout_task"].done():
                existing_game_state["timeout_task"].cancel() 
            msg = f"‚ö†Ô∏è M·ªôt game N·ªëi T·ª´ ({existing_game_state.get('game_language', '??').upper()}) ƒë√£ ƒëang di·ªÖn ra. D√πng `{prefix}stop` ho·∫∑c `/stop` ƒë·ªÉ d·ª´ng."
            await send_response(msg, ephemeral_flag=True)
            return
        elif "timeout_task" in existing_game_state and existing_game_state["timeout_task"] and not existing_game_state["timeout_task"].done():
             existing_game_state["timeout_task"].cancel() 

    # --- Bi·∫øn cho game state ---
    # current_phrase_str: t·ª´ VN chu·∫©n h√≥a ho·∫∑c Hiragana chu·∫©n h√≥a c·ªßa t·ª´ JP
    # word_to_match_next: ch·ªØ th·ª© 2 c·ªßa t·ª´ VN, ho·∫∑c k√Ω t·ª± Hiragana cu·ªëi c·ªßa t·ª´ JP
    # current_phrase_display_form: D·∫°ng hi·ªÉn th·ªã g·ªëc c·ªßa t·ª´ (quan tr·ªçng cho JP ƒë·ªÉ gi·ªØ Kanji/Kata)
    current_phrase_str: str = "" 
    word_to_match_next: str = ""
    current_phrase_display_form: str = "" # D√πng ƒë·ªÉ hi·ªÉn th·ªã, ƒë·∫∑c bi·ªát cho JP
    
    player_id_for_first_move = author.id
    participants_since_start = set()
    sent_game_start_message: discord.Message = None

    if not start_phrase_input: # Bot ch·ªçn t·ª´
        if game_lang == "VN":
            possible_starts_vn = ["·∫•m √°p", "b·∫ßu tr·ªùi", "d√≤ng s√¥ng", "c√¢y c·∫ßu", "m√°y t√≠nh", "ƒëi·ªán tho·∫°i", "h·ªçc sinh", "sinh vi√™n", "vi√™n ph·∫•n", "nh√† c·ª≠a", "c∆°m n∆∞·ªõc", "xe c·ªô", "t√¨nh y√™u", "h·∫°nh ph√∫c", "n·ªói bu·ªìn", "√°o qu·∫ßn", "qu·∫ßn ƒë·∫£o", "ƒë·∫£o xa"]
            random.shuffle(possible_starts_vn)
            chosen_start_phrase_vn = ""
            for phrase_attempt in possible_starts_vn:
                if await wiktionary_api.is_vietnamese_phrase_or_word_valid_api(
                    phrase_attempt, bot.http_session, bot.wiktionary_cache_vn, bot.local_dictionary_vn
                ):
                    chosen_start_phrase_vn = phrase_attempt
                    break
            if not chosen_start_phrase_vn:
                await send_response("‚ö†Ô∏è Bot kh√¥ng t√¨m ƒë∆∞·ª£c t·ª´ b·∫Øt ƒë·∫ßu Ti·∫øng Vi·ªát ng·∫´u nhi√™n h·ª£p l·ªá.", ephemeral_flag=True); return
            
            current_phrase_str = chosen_start_phrase_vn
            current_phrase_words = current_phrase_str.split()
            word_to_match_next = current_phrase_words[1]
            current_phrase_display_form = " ".join(word.capitalize() for word in current_phrase_words)
            response_msg_content = f"ü§ñ Bot (VN) ƒë√£ ch·ªçn: **{current_phrase_display_form}**\nüëâ Ch·ªØ c·∫ßn n·ªëi: **{word_to_match_next.capitalize()}**"
        
        else: # JP game, bot ch·ªçn t·ª´
            if not bot.local_dictionary_jp:
                await send_response("‚ö†Ô∏è Bot kh√¥ng c√≥ t·ª´ ƒëi·ªÉn Ti·∫øng Nh·∫≠t ƒë·ªÉ ch·ªçn t·ª´ b·∫Øt ƒë·∫ßu.", ephemeral_flag=True); return
            
            # Ch·ªçn t·ª´ JP ng·∫´u nhi√™n t·ª´ local dict, ∆∞u ti√™n t·ª´ kh√¥ng k·∫øt th√∫c b·∫±ng „Çì tr·ª´ khi kh√¥ng c√≤n l·ª±a ch·ªçn
            valid_jp_starts = [
                entry for entry in bot.local_dictionary_jp 
                if entry.get('hira') and not entry['hira'].endswith('„Çì')
            ]
            if not valid_jp_starts: # N·∫øu t·∫•t c·∫£ ƒë·ªÅu k·∫øt th√∫c b·∫±ng „Çì ho·∫∑c dict r·ªóng
                valid_jp_starts = [entry for entry in bot.local_dictionary_jp if entry.get('hira')]

            if not valid_jp_starts:
                 await send_response("‚ö†Ô∏è Bot kh√¥ng t√¨m ƒë∆∞·ª£c t·ª´ Ti·∫øng Nh·∫≠t ng·∫´u nhi√™n h·ª£p l·ªá.", ephemeral_flag=True); return

            chosen_entry = random.choice(valid_jp_starts)
            current_phrase_str = chosen_entry['hira'] # Hiragana chu·∫©n h√≥a
            current_phrase_display_form = chosen_entry.get('kanji', current_phrase_str) # ∆Øu ti√™n Kanji/Kata ƒë·ªÉ hi·ªÉn th·ªã
            
            last_hira_char = utils.get_last_hiragana_char(current_phrase_str)
            if not last_hira_char: # Kh√¥ng th·ªÉ l·∫•y k√Ω t·ª± cu·ªëi (l·ªói hi·∫øm)
                await send_response("‚ö†Ô∏è L·ªói x·ª≠ l√Ω t·ª´ b·∫Øt ƒë·∫ßu Ti·∫øng Nh·∫≠t c·ªßa Bot.", ephemeral_flag=True); return
            word_to_match_next = last_hira_char # K√Ω t·ª± Hiragana cu·ªëi

            response_msg_content = f"ü§ñ Bot (JP) ƒë√£ ch·ªçn: **{current_phrase_display_form}** (`{current_phrase_str}`)\nüëâ √Çm ti·∫øt c·∫ßn n·ªëi: **{word_to_match_next}**"

        player_id_for_first_move = bot.user.id
    
    else: # Ng∆∞·ªùi ch∆°i cung c·∫•p t·ª´
        start_phrase_input_cleaned = start_phrase_input.strip()
        if game_lang == "VN":
            temp_words = utils.get_words_from_input(start_phrase_input_cleaned)
            if len(temp_words) != 2:
                await send_response(f"‚ö†Ô∏è C·ª•m t·ª´ \"**{start_phrase_input_cleaned}**\" ph·∫£i c√≥ **ƒë√∫ng 2 ch·ªØ** (Ti·∫øng Vi·ªát).", ephemeral_flag=True); return

            phrase_to_check_vn = f"{temp_words[0]} {temp_words[1]}"
            if not await wiktionary_api.is_vietnamese_phrase_or_word_valid_api(
                phrase_to_check_vn, bot.http_session, bot.wiktionary_cache_vn, bot.local_dictionary_vn
            ):
                await send_response(f"‚ö†Ô∏è C·ª•m t·ª´ \"**{start_phrase_input_cleaned.title()}**\" kh√¥ng h·ª£p l·ªá theo t·ª´ ƒëi·ªÉn VN.", ephemeral_flag=True); return
            
            current_phrase_str = phrase_to_check_vn
            word_to_match_next = temp_words[1]
            current_phrase_display_form = " ".join(w.capitalize() for w in temp_words)
            response_msg_content = f"üéÆ Game VN ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu b·ªüi {author.mention} v·ªõi: **{current_phrase_display_form}**\nüëâ Ch·ªØ c·∫ßn n·ªëi: **{word_to_match_next.capitalize()}**"
        
        else: # JP game, ng∆∞·ªùi ch∆°i cung c·∫•p t·ª´
            if not bot.kakasi: # Ki·ªÉm tra l·∫°i Kakasi
                 await send_response("‚ö†Ô∏è L·ªói: Kh√¥ng th·ªÉ x·ª≠ l√Ω t·ª´ Ti·∫øng Nh·∫≠t do thi·∫øu th∆∞ vi·ªán tr√™n bot.", ephemeral_flag=True); return

            is_valid_jp, hira_form_jp = await wiktionary_api.is_japanese_word_valid_api(
                start_phrase_input_cleaned, bot.http_session, bot.wiktionary_cache_jp, bot.local_dictionary_jp, bot.kakasi
            )
            if not is_valid_jp or not hira_form_jp:
                await send_response(f"‚ö†Ô∏è T·ª´ \"**{start_phrase_input_cleaned}**\" kh√¥ng h·ª£p l·ªá theo t·ª´ ƒëi·ªÉn JP.", ephemeral_flag=True); return

            # Lu·∫≠t Shiritori: Kh√¥ng ƒë∆∞·ª£c k·∫øt th√∫c b·∫±ng „Çì (n) trong l∆∞·ª£t ƒë·∫ßu ti√™n (c√≥ th·ªÉ n·ªõi l·ªèng n·∫øu mu·ªën)
            # if hira_form_jp.endswith('„Çì'):
            #     await send_response(f"‚ö†Ô∏è T·ª´ b·∫Øt ƒë·∫ßu \"**{start_phrase_input_cleaned}**\" (`{hira_form_jp}`) k·∫øt th√∫c b·∫±ng '„Çì'. Vui l√≤ng ch·ªçn t·ª´ kh√°c.", ephemeral_flag=True); return

            current_phrase_str = hira_form_jp # Hiragana chu·∫©n h√≥a
            current_phrase_display_form = start_phrase_input_cleaned # Gi·ªØ nguy√™n d·∫°ng input c·ªßa user ƒë·ªÉ hi·ªÉn th·ªã
            
            last_hira_char = utils.get_last_hiragana_char(current_phrase_str)
            if not last_hira_char:
                await send_response(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω t·ª´ \"**{start_phrase_input_cleaned}**\".", ephemeral_flag=True); return
            word_to_match_next = last_hira_char

            response_msg_content = f"üéÆ Game JP ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu b·ªüi {author.mention} v·ªõi: **{current_phrase_display_form}** (`{current_phrase_str}`)\nüëâ √Çm ti·∫øt c·∫ßn n·ªëi: **{word_to_match_next}**"

        if player_id_for_first_move != bot.user.id:
             participants_since_start.add(player_id_for_first_move)

    # G·ª≠i tin nh·∫Øn b·∫Øt ƒë·∫ßu game
    if interaction:
        if interaction.response.is_done():
             sent_game_start_message = await interaction.followup.send(response_msg_content, wait=True)
        else:
             await interaction.response.send_message(response_msg_content)
             sent_game_start_message = await interaction.original_response()
    else:
        sent_game_start_message = await channel.send(response_msg_content)


    # L∆∞u tr·∫°ng th√°i game
    bot.active_games[channel.id] = {
        "game_language": game_lang, # Quan tr·ªçng: l∆∞u ng√¥n ng·ªØ c·ªßa game
        "current_phrase_str": current_phrase_str, # T·ª´ VN ho·∫∑c Hiragana c·ªßa JP
        "current_phrase_display_form": current_phrase_display_form, # D·∫°ng hi·ªÉn th·ªã
        "word_to_match_next": word_to_match_next, # Ch·ªØ VN ho·∫∑c Hiragana cu·ªëi c·ªßa JP
        "used_phrases": {current_phrase_str}, # Set c√°c t·ª´ ƒë√£ d√πng (d·∫°ng chu·∫©n h√≥a)
        "last_player_id": player_id_for_first_move,
        "active": True,
        "last_correct_message_id": sent_game_start_message.id if sent_game_start_message else 0,
        "timeout_task": None,
        "participants_since_start": participants_since_start,
        "timeout_can_be_activated": len(participants_since_start) >= min_p,
        "guild_id": guild_id,
        "min_players_for_timeout": min_p
    }

    game_state = bot.active_games[channel.id]

    if game_state["timeout_can_be_activated"] and player_id_for_first_move != bot.user.id:
        new_timeout_task = asyncio.create_task(
            check_game_timeout(
                bot, channel.id, guild_id,
                game_state["last_player_id"],
                game_state["current_phrase_str"] # Truy·ªÅn t·ª´ chu·∫©n h√≥a
            )
        )
        game_state["timeout_task"] = new_timeout_task
        if channel:
            try: 
                await channel.send(
                    f"‚ÑπÔ∏è ƒê√£ c√≥ {len(game_state['participants_since_start'])} ng∆∞·ªùi ch∆°i (t·ªëi thi·ªÉu: {min_p}). "
                    f"Th·ªùi gian ch·ªù {timeout_s} gi√¢y cho m·ªói l∆∞·ª£t s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng.",
                    delete_after=20
                )
            except discord.HTTPException: pass


async def internal_stop_game(bot: commands.Bot, channel: discord.TextChannel, author: discord.User | discord.Member,
                             guild_id: int, interaction: discord.Interaction = None):
    # ... (Gi·ªØ nguy√™n, PostGameView s·∫Ω t·ª± x·ª≠ l√Ω vi·ªác g·ªçi l·∫°i internal_start_game,
    # v√† internal_start_game s·∫Ω ƒë·ªçc l·∫°i game_lang t·ª´ DB)
    if channel.id in bot.active_games: 
        game_to_stop = bot.active_games.pop(channel.id) 

        if "timeout_task" in game_to_stop and game_to_stop["timeout_task"] and not game_to_stop["timeout_task"].done():
            game_to_stop["timeout_task"].cancel() 

        if game_to_stop.get("active") and game_to_stop.get("last_player_id") != bot.user.id:
            last_player_id = game_to_stop.get("last_player_id")
            last_player_guild_id = game_to_stop.get("guild_id", guild_id)
            if last_player_id and last_player_guild_id and bot.db_pool:
                 await database.reset_win_streak_for_user(bot.db_pool, last_player_id, last_player_guild_id)

        game_lang_stopped = game_to_stop.get('game_language', '??').upper()
        embed = discord.Embed(description=f"üëã Game N·ªëi T·ª´ ({game_lang_stopped}) ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi {author.mention}.", color=discord.Color.orange())


        guild_cfg_obj = await database.get_guild_config(bot.db_pool, guild_id)
        prefix = guild_cfg_obj.get("command_prefix", bot_cfg.DEFAULT_COMMAND_PREFIX) if guild_cfg_obj else bot_cfg.DEFAULT_COMMAND_PREFIX

        view = PostGameView(
            channel=channel,
            original_starter_id=author.id,
            command_prefix_for_guild=prefix,
            bot_instance=bot, 
            internal_start_game_callable=internal_start_game 
        )

        msg_to_set_view: discord.Message = None
        try: 
            if interaction:
                if interaction.response.is_done():
                    msg_to_set_view = await interaction.followup.send(embed=embed, view=view, wait=True)
                else:
                    await interaction.response.send_message(embed=embed, view=view)
                    msg_to_set_view = await interaction.original_response()
            else:
                msg_to_set_view = await channel.send(embed=embed, view=view)
        except discord.HTTPException as e:
            print(f"L·ªói HTTP khi g·ª≠i tin nh·∫Øn d·ª´ng game: {e}")
            if interaction and channel : 
                try: msg_to_set_view = await channel.send(embed=embed, view=view)
                except discord.HTTPException as e_ch: print(f"L·ªói HTTP fallback g·ª≠i tin nh·∫Øn d·ª´ng game: {e_ch}")

        if msg_to_set_view: view.message_to_edit = msg_to_set_view

    else: 
        msg_content = "ü§∑ Hi·ªán kh√¥ng c√≥ game N·ªëi T·ª´ n√†o ƒëang di·ªÖn ra trong k√™nh n√†y."
        if interaction:
            if not interaction.response.is_done(): await interaction.response.send_message(msg_content, ephemeral=True)
            else: await interaction.followup.send(msg_content, ephemeral=True)
        else: await channel.send(msg_content, delete_after=10)


async def process_game_message(bot: commands.Bot, message: discord.Message):
    channel_id = message.channel.id
    guild_id = message.guild.id

    if not bot.http_session or bot.http_session.closed: return 
    if not bot.db_pool: return

    if channel_id not in bot.active_games or not bot.active_games[channel_id].get("active", False):
        return 

    game_state = bot.active_games[channel_id]
    current_player_id = message.author.id
    current_player_name = message.author.name
    game_lang = game_state.get("game_language", "VN").upper() # L·∫•y ng√¥n ng·ªØ game

    if game_lang == "JP" and not bot.kakasi: # Ki·ªÉm tra Kakasi cho game JP
        # C√≥ th·ªÉ g·ª≠i m·ªôt th√¥ng b√°o l·ªói m·ªôt l·∫ßn cho k√™nh n√†y n·∫øu mu·ªën
        print(f"WARNING: Kakasi kh√¥ng s·∫µn s√†ng cho game JP ·ªü k√™nh {channel_id}")
        return


    if game_state.get("guild_id") != guild_id:
        print(f"L·ªói: Game state k√™nh {channel_id} c√≥ guild_id {game_state.get('guild_id')} ko kh·ªõp {guild_id}.")
        if "timeout_task" in game_state and game_state["timeout_task"] and not game_state["timeout_task"].done():
            game_state["timeout_task"].cancel() 
        del bot.active_games[channel_id]
        return

    if current_player_id == game_state["last_player_id"]:
        try:
            await message.add_reaction(bot_cfg.WRONG_TURN_REACTION)
            guild_cfg_obj = await database.get_guild_config(bot.db_pool, guild_id)
            prefix_val = guild_cfg_obj.get("command_prefix", bot_cfg.DEFAULT_COMMAND_PREFIX) if guild_cfg_obj else bot_cfg.DEFAULT_COMMAND_PREFIX

            await message.channel.send(
                f"{bot_cfg.WRONG_TURN_REACTION} {message.author.mention}, b·∫°n v·ª´a ƒëi r·ªìi! H√£y ƒë·ª£i ng∆∞·ªùi kh√°c. "
                f"(D√πng `{prefix_val}stop` ho·∫∑c `/stop` ƒë·ªÉ d·ª´ng).",
                delete_after=bot_cfg.DELETE_WRONG_TURN_MESSAGE_AFTER
            )
            await database.update_stat(bot.db_pool, bot.user.id, current_player_id, guild_id, "wrong_turn", current_player_name)
        except (discord.Forbidden, discord.HTTPException): pass 
        return

    user_input_original_str = message.content.strip()
    if not user_input_original_str: return 

    # --- Bi·∫øn cho l∆∞·ª£t ƒëi hi·ªán t·∫°i ---
    # phrase_to_validate: t·ª´ VN chu·∫©n h√≥a ho·∫∑c Hiragana chu·∫©n h√≥a c·ªßa JP
    # display_form_for_current_move: d·∫°ng hi·ªÉn th·ªã g·ªëc c·ªßa t·ª´ (quan tr·ªçng cho JP)
    phrase_to_validate: str = ""
    display_form_for_current_move: str = user_input_original_str # M·∫∑c ƒë·ªãnh l√† input g·ªëc
    
    expected_first_char_or_word = game_state["word_to_match_next"] # Ch·ªØ VN ho·∫∑c Hira JP c·∫ßn n·ªëi

    error_occurred = False 
    error_type_for_stat = None 

    if game_lang == "VN":
        user_phrase_words_lower = utils.get_words_from_input(user_input_original_str)
        if len(user_phrase_words_lower) != 2: return # Kh√¥ng ph·∫£i c·ª•m 2 ch·ªØ VN th√¨ b·ªè qua

        word1_user, word2_user = user_phrase_words_lower[0], user_phrase_words_lower[1]
        phrase_to_validate = f"{word1_user} {word2_user}"
        display_form_for_current_move = " ".join(w.capitalize() for w in user_phrase_words_lower)

        if word1_user != expected_first_char_or_word:
            error_occurred = True; error_type_for_stat = "wrong_word_link"
        
        if not error_occurred and not await wiktionary_api.is_vietnamese_phrase_or_word_valid_api(
            phrase_to_validate, bot.http_session, bot.wiktionary_cache_vn, bot.local_dictionary_vn
        ):
            error_occurred = True; error_type_for_stat = "invalid_wiktionary"
    
    else: # JP game
        is_valid_jp, hira_form_jp = await wiktionary_api.is_japanese_word_valid_api(
            user_input_original_str, bot.http_session, bot.wiktionary_cache_jp, bot.local_dictionary_jp, bot.kakasi
        )
        if not is_valid_jp or not hira_form_jp:
            error_occurred = True; error_type_for_stat = "invalid_wiktionary"
        else:
            phrase_to_validate = hira_form_jp # D√πng Hiragana chu·∫©n ƒë·ªÉ check v√† l∆∞u
            # display_form_for_current_move ƒë√£ l√† user_input_original_str

            first_char_current_hira = utils.get_first_hiragana_char(hira_form_jp)
            if not first_char_current_hira or first_char_current_hira != expected_first_char_or_word:
                error_occurred = True; error_type_for_stat = "wrong_word_link"
            
            # Lu·∫≠t ƒë·∫∑c bi·ªát cho Shiritori: t·ª´ kh√¥ng ƒë∆∞·ª£c k·∫øt th√∫c b·∫±ng '„Çì' (tr·ª´ khi ƒë∆∞·ª£c c·∫•u h√¨nh kh√°c)
            # ·ªû ƒë√¢y, ta s·∫Ω cho ph√©p t·ª´ k·∫øt th√∫c b·∫±ng „Çì, v√† t·ª´ ti·∫øp theo ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng „Çì.
            # N·∫øu mu·ªën c·∫•m t·ª´ k·∫øt th√∫c b·∫±ng „Çì, th√™m check ·ªü ƒë√¢y:
            # if hira_form_jp.endswith('„Çì'):
            #     error_occurred = True; error_type_for_stat = "invalid_word_endsWithN" # Stat m·ªõi n·∫øu c·∫ßn

    # Ki·ªÉm tra t·ª´ ƒë√£ d√πng (√°p d·ª•ng cho c·∫£ VN v√† JP, d√πng phrase_to_validate ƒë√£ chu·∫©n h√≥a)
    if not error_occurred and phrase_to_validate in game_state["used_phrases"]:
        error_occurred = True; error_type_for_stat = "used_word_error"

    if error_occurred: 
        try: await message.add_reaction(bot_cfg.ERROR_REACTION)
        except (discord.Forbidden, discord.HTTPException): pass
        if error_type_for_stat: 
            await database.update_stat(bot.db_pool, bot.user.id, current_player_id, guild_id, error_type_for_stat, current_player_name)
        return

    # --- ƒê√öNG L∆Ø·ª¢T ---
    try: await message.add_reaction(bot_cfg.CORRECT_REACTION)
    except (discord.Forbidden, discord.HTTPException): pass
    await database.update_stat(bot.db_pool, bot.user.id, current_player_id, guild_id, "correct_moves", current_player_name)

    if "timeout_task" in game_state and game_state["timeout_task"] and not game_state["timeout_task"].done():
        game_state["timeout_task"].cancel()

    # C·∫≠p nh·∫≠t game state
    game_state["current_phrase_str"] = phrase_to_validate # T·ª´ VN ho·∫∑c Hiragana JP
    game_state["current_phrase_display_form"] = display_form_for_current_move # D·∫°ng hi·ªÉn th·ªã

    if game_lang == "VN":
        game_state["word_to_match_next"] = phrase_to_validate.split()[1]
    else: # JP
        last_hira_char_of_current = utils.get_last_hiragana_char(phrase_to_validate)
        if not last_hira_char_of_current: # L·ªói hi·∫øm
            # N√™n d·ª´ng game ho·∫∑c b√°o l·ªói nghi√™m tr·ªçng ·ªü ƒë√¢y
            print(f"L·ªñI NGHI√äM TR·ªåNG: Kh√¥ng th·ªÉ l·∫•y k√Ω t·ª± cu·ªëi c·ªßa t·ª´ JP h·ª£p l·ªá: {phrase_to_validate}")
            # C√≥ th·ªÉ t·∫°m th·ªùi kh√¥ng thay ƒë·ªïi word_to_match_next ƒë·ªÉ tr√°nh l·ªói
            # Ho·∫∑c c·ªë g·∫Øng rollback/b√°o l·ªói cho ng∆∞·ªùi d√πng
            await message.channel.send(f"‚ö†Ô∏è Bot g·∫∑p l·ªói x·ª≠ l√Ω t·ª´ \"{display_form_for_current_move}\". L∆∞·ª£t n√†y c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c t√≠nh ƒë√∫ng.")
            # Kh√¥ng c·∫≠p nh·∫≠t word_to_match_next n·∫øu l·ªói
        else:
            game_state["word_to_match_next"] = last_hira_char_of_current


    game_state["used_phrases"].add(phrase_to_validate)
    game_state["last_player_id"] = current_player_id
    game_state["last_correct_message_id"] = message.id

    if current_player_id != bot.user.id: 
        game_state["participants_since_start"].add(current_player_id)

    timeout_s_config, min_p_config, _ = await utils.get_guild_game_settings(bot, guild_id) # L·∫•y l·∫°i config, kh√¥ng c·∫ßn game_lang ·ªü ƒë√¢y
    game_state["min_players_for_timeout"] = min_p_config 

    if not game_state["timeout_can_be_activated"] and \
       len(game_state["participants_since_start"]) >= game_state["min_players_for_timeout"]:
        game_state["timeout_can_be_activated"] = True
        if msg_channel := bot.get_channel(channel_id):
            try: 
                await msg_channel.send(
                    f"‚ÑπÔ∏è ƒê√£ c√≥ {len(game_state['participants_since_start'])} ng∆∞·ªùi ch∆°i ({game_state['min_players_for_timeout']} t·ªëi thi·ªÉu). "
                    f"Timeout {timeout_s_config} gi√¢y s·∫Ω √°p d·ª•ng.",
                    delete_after=20
                )
            except discord.HTTPException: pass

    if game_state["timeout_can_be_activated"]:
        new_timeout_task = asyncio.create_task(
            check_game_timeout(bot, channel_id, guild_id, game_state["last_player_id"], game_state["current_phrase_str"]) # Truy·ªÅn t·ª´ chu·∫©n h√≥a
        )
        game_state["timeout_task"] = new_timeout_task