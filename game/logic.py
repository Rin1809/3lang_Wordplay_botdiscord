# Noitu/game/logic.py
import discord
from discord.ext import commands
import random
import asyncio
import traceback

from .. import database
from .. import wiktionary_api
from .. import utils
from .. import config as bot_cfg 
from .views import PostGameView # Import PostGameView ƒë·ªÉ d√πng ·ªü cu·ªëi game


async def check_game_timeout(bot: commands.Bot, channel_id: int, guild_id: int, expected_last_player_id: int, expected_phrase_normalized: str):
    if not bot.db_pool: return # DB ph·∫£i s·∫µn s√†ng

    guild_cfg = await database.get_guild_config(bot.db_pool, guild_id) # L·∫•y config guild
    timeout_seconds_for_guild = guild_cfg.get("timeout_seconds", bot_cfg.DEFAULT_TIMEOUT_SECONDS)
    command_prefix_for_guild = guild_cfg.get("command_prefix", bot_cfg.DEFAULT_COMMAND_PREFIX)

    countdown_message: discord.Message = None
    message_channel = bot.get_channel(channel_id)
    if not message_channel or not isinstance(message_channel, discord.TextChannel):
        if channel_id in bot.active_games: del bot.active_games[channel_id] # D·ªçn d·∫πp n·∫øu k√™nh ko h·ª£p l·ªá
        return

    initial_countdown_text_base = "" # Text c·ªë ƒë·ªãnh c·ªßa msg ƒë·∫øm ng∆∞·ª£c
    if expected_last_player_id == bot.user.id:
        initial_countdown_text_base = f"‚è≥ Bot ƒë√£ ra t·ª´ \"**{expected_phrase_normalized.title()}**\". "
    else:
        try:
            winner_user_to_be = await bot.fetch_user(expected_last_player_id)
            initial_countdown_text_base = f"‚è≥ {winner_user_to_be.mention} ƒë√£ ra t·ª´ \"**{expected_phrase_normalized.title()}**\". "
        except discord.NotFound:
            initial_countdown_text_base = f"‚è≥ Ng∆∞·ªùi ch∆°i ID {expected_last_player_id} ƒë√£ ra t·ª´ \"**{expected_phrase_normalized.title()}**\". "
        except discord.HTTPException: # L·ªói API Discord
            initial_countdown_text_base = f"‚è≥ M·ªôt ng∆∞·ªùi ch∆°i ƒë√£ ra t·ª´ \"**{expected_phrase_normalized.title()}**\". "
    
    try:
        countdown_message = await message_channel.send(f"{initial_countdown_text_base}Th·ªùi gian cho ng∆∞·ªùi ti·∫øp theo: {timeout_seconds_for_guild} gi√¢y.")
    except discord.HTTPException as e:
        print(f"L·ªói g·ª≠i msg ƒë·∫øm ng∆∞·ª£c: {e}")
        countdown_message = None

    time_slept = 0 # T·ªïng th·ªùi gian ƒë√£ ng·ªß
    edit_interval = 1 # Edit msg m·ªói 1s

    try:
        while time_slept < timeout_seconds_for_guild:
            await asyncio.sleep(min(edit_interval, timeout_seconds_for_guild - time_slept))
            time_slept += edit_interval

            # Ki·ªÉm tra game c√≥ c√≤n ho·∫°t ƒë·ªông v√† ƒë√∫ng tr·∫°ng th√°i ko
            if channel_id not in bot.active_games or not bot.active_games[channel_id]["active"]:
                if countdown_message: # D·ªçn msg n·∫øu game d·ª´ng s·ªõm
                    try: await countdown_message.delete()
                    except (discord.NotFound, discord.HTTPException): pass
                return

            game = bot.active_games[channel_id]
            if not (game.get("last_player_id") == expected_last_player_id and \
                    game.get("current_phrase_str") == expected_phrase_normalized):
                if countdown_message: # D·ªçn msg n·∫øu c√≥ ng∆∞·ªùi ch∆°i m·ªõi
                    try: await countdown_message.delete()
                    except (discord.NotFound, discord.HTTPException): pass
                return
            
            if countdown_message: # C·∫≠p nh·∫≠t msg ƒë·∫øm ng∆∞·ª£c
                remaining_time = max(0, timeout_seconds_for_guild - time_slept)
                new_text = f"{initial_countdown_text_base}Th·ªùi gian cho ng∆∞·ªùi ti·∫øp theo: {remaining_time} gi√¢y."
                if remaining_time > 0 :
                    try: await countdown_message.edit(content=new_text)
                    except (discord.NotFound, discord.HTTPException): countdown_message = None 

            if time_slept >= timeout_seconds_for_guild: break # Timeout

        # --- H·∫æT GI·ªú ---
        if countdown_message: # X√≥a msg ƒë·∫øm ng∆∞·ª£c cu·ªëi c√πng
            try: await countdown_message.delete()
            except (discord.NotFound, discord.HTTPException): pass

        # Ki·ªÉm tra l·∫ßn cu·ªëi tr∆∞·ªõc khi c√¥ng b·ªë th·∫Øng
        if channel_id in bot.active_games and bot.active_games[channel_id]["active"]:
            game = bot.active_games[channel_id]
            if game.get("last_player_id") == expected_last_player_id and \
               game.get("current_phrase_str") == expected_phrase_normalized:

                winner_id = game["last_player_id"]
                winning_phrase_display = " ".join(w.capitalize() for w in expected_phrase_normalized.split()) # T·ª´ th·∫Øng cu·ªôc
                
                win_embed = discord.Embed(color=discord.Color.gold())
                original_starter_for_view = winner_id # ID ng∆∞·ªùi ch∆°i ƒë·ªÉ n√∫t "Ch∆°i L·∫°i" d√πng

                if winner_id == bot.user.id: # N·∫øu bot l√† ng∆∞·ªùi ra t·ª´ cu·ªëi
                    win_embed.title = "‚è≥ H·∫øt Gi·ªù! ‚è≥"
                    win_embed.description = (
                        f"ƒê√£ h·∫øt {timeout_seconds_for_guild} gi√¢y! Kh√¥ng ai n·ªëi ƒë∆∞·ª£c t·ª´ \"**{winning_phrase_display}**\" c·ªßa Bot.\n"
                        f"Game k·∫øt th√∫c kh√¥ng c√≥ ng∆∞·ªùi th·∫Øng."
                    )
                    participants_list = list(game.get("participants_since_start", []))
                    # N√∫t "Ch∆°i L·∫°i" s·∫Ω do ng∆∞·ªùi ƒë·∫ßu ti√™n trong list ng∆∞·ªùi ch∆°i b·∫Øt ƒë·∫ßu (n·∫øu c√≥)
                    original_starter_for_view = participants_list[0] if participants_list else bot.user.id
                else: # Ng∆∞·ªùi ch∆°i th·∫Øng
                    winner_name_display = f"User ID {winner_id}" # T√™n hi·ªÉn th·ªã fallback
                    winner_avatar_url = None
                    try:
                        winner_user = await bot.fetch_user(winner_id)
                        winner_name_display = winner_user.name # D√πng .name cho DB
                        winner_avatar_url = winner_user.display_avatar.url
                        # C·∫≠p nh·∫≠t stat th·∫Øng cho ng∆∞·ªùi ch∆°i
                        await database.update_stat(bot.db_pool, bot.user.id, winner_id, guild_id, "wins", winner_name_display)
                        
                        # Reset win streak cho nh·ªØng ng∆∞·ªùi tham gia kh√°c
                        for pid in game.get("participants_since_start", set()):
                            if pid != winner_id and pid != bot.user.id:
                                await database.reset_win_streak_for_user(bot.db_pool, pid, guild_id)

                        win_embed.title = f"üéâ Ch√∫c M·ª´ng {discord.utils.escape_markdown(winner_name_display)}! üéâ"
                        win_embed.description = (
                            f"{winner_user.mention} ƒë√£ chi·∫øn th·∫Øng!\n"
                            f"Kh√¥ng ai n·ªëi ti·∫øp ƒë∆∞·ª£c t·ª´ \"**{winning_phrase_display}**\" c·ªßa b·∫°n trong {timeout_seconds_for_guild} gi√¢y."
                        )
                        if winner_avatar_url: win_embed.set_thumbnail(url=winner_avatar_url)

                        user_stats = await database.get_user_stats_entry(bot.db_pool, winner_id, guild_id, winner_name_display)
                        if user_stats: # Th√™m th√¥ng tin stat v√†o embed
                             win_embed.add_field(name="Th√†nh T√≠ch", value=f"Th·∫Øng: {user_stats['wins']} | Chu·ªói: {user_stats['current_win_streak']} (Max: {user_stats['max_win_streak']})", inline=False)
                        original_starter_for_view = winner_id 
                    except discord.NotFound: # Ko t√¨m th·∫•y user
                        await database.update_stat(bot.db_pool, bot.user.id, winner_id, guild_id, "wins", f"User ID {winner_id}")
                        win_embed.title = "üéâ Ng∆∞·ªùi Ch∆°i Th·∫Øng Cu·ªôc! üéâ"
                        win_embed.description = f"Ng∆∞·ªùi ch∆°i ID {winner_id} ƒë√£ th·∫Øng v·ªõi t·ª´ \"**{winning_phrase_display}**\"! (Kh√¥ng th·ªÉ l·∫•y th√¥ng tin chi ti·∫øt)."
                    except discord.HTTPException: # L·ªói API Discord
                         await database.update_stat(bot.db_pool, bot.user.id, winner_id, guild_id, "wins", f"User ID {winner_id} (API Err)")
                         win_embed.title = "üéâ M·ªôt Ng∆∞·ªùi Ch∆°i Th·∫Øng! üéâ"
                         win_embed.description = f"M·ªôt ng∆∞·ªùi ch∆°i ƒë√£ th·∫Øng v·ªõi t·ª´ \"**{winning_phrase_display}**\"! (L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi ch∆°i)."
                
                view = PostGameView(
                    channel=message_channel, 
                    original_starter_id=original_starter_for_view, 
                    command_prefix_for_guild=command_prefix_for_guild,
                    bot_instance=bot, # Truy·ªÅn bot instance
                    internal_start_game_callable=internal_start_game # Truy·ªÅn h√†m ƒë·ªÉ "Ch∆°i L·∫°i"
                )
                msg_with_view = await message_channel.send(embed=win_embed, view=view)
                view.message_to_edit = msg_with_view # G√°n message ƒë·ªÉ view c√≥ th·ªÉ edit (disable n√∫t)

                # D·ªçn d·∫πp game state n·∫øu timeout n√†y k·∫øt th√∫c game
                if channel_id in bot.active_games and \
                   bot.active_games[channel_id].get("last_player_id") == expected_last_player_id and \
                   bot.active_games[channel_id].get("current_phrase_str") == expected_phrase_normalized:
                    del bot.active_games[channel_id]
    
    except asyncio.CancelledError: # Task b·ªã h·ªßy (do c√≥ ng∆∞·ªùi ch∆°i m·ªõi ho·∫∑c game d·ª´ng)
        if countdown_message: 
            try: await countdown_message.delete()
            except (discord.NotFound, discord.HTTPException): pass
    except Exception as e:
        print(f"L·ªói nghi√™m tr·ªçng trong check_game_timeout cho k√™nh {channel_id} (t·ª´: {expected_phrase_normalized}): {e}")
        traceback.print_exc()
        if countdown_message: 
            try: await countdown_message.delete()
            except (discord.NotFound, discord.HTTPException): pass


async def internal_start_game(bot: commands.Bot, channel: discord.TextChannel, author: discord.User | discord.Member, 
                              guild_id: int, start_phrase_input: str = None, interaction: discord.Interaction = None):
    # H√†m g·ª≠i response n·ªôi b·ªô
    async def send_response(msg_content: str, ephemeral_flag: bool = False):
        if interaction:
            if interaction.response.is_done(): # ƒê√£ defer/reply
                await interaction.followup.send(msg_content, ephemeral=ephemeral_flag)
            else: 
                await interaction.response.send_message(msg_content, ephemeral=ephemeral_flag)
        else: # Context l·ªánh prefix
            await channel.send(msg_content, delete_after=15 if ephemeral_flag else None)

    # Ki·ªÉm tra c√°c t√†i nguy√™n c·ªßa bot
    if not bot.http_session or bot.http_session.closed:
        await send_response("‚ö†Ô∏è Bot ch∆∞a s·∫µn s√†ng (Session HTTP). Vui l√≤ng th·ª≠ l·∫°i sau gi√¢y l√°t.", ephemeral_flag=True)
        return
    if not bot.db_pool:
        await send_response("‚ö†Ô∏è Bot ch∆∞a s·∫µn s√†ng (K·∫øt n·ªëi Database). Vui l√≤ng th·ª≠ l·∫°i sau gi√¢y l√°t.", ephemeral_flag=True)
        return

    timeout_s, min_p = await utils.get_guild_game_settings(bot, guild_id) # L·∫•y c√†i ƒë·∫∑t game
    guild_cfg_obj = await database.get_guild_config(bot.db_pool, guild_id)
    prefix = guild_cfg_obj.get("command_prefix", bot_cfg.DEFAULT_COMMAND_PREFIX) if guild_cfg_obj else bot_cfg.DEFAULT_COMMAND_PREFIX

    # Ki·ªÉm tra game ƒëang ch·∫°y
    if channel.id in bot.active_games:
        existing_game_state = bot.active_games[channel.id]
        if existing_game_state.get("active", False): 
            if "timeout_task" in existing_game_state and existing_game_state["timeout_task"] and not existing_game_state["timeout_task"].done():
                existing_game_state["timeout_task"].cancel() # H·ªßy timeout c≈©
            
            msg = f"‚ö†Ô∏è M·ªôt game N·ªëi T·ª´ ƒë√£ ƒëang di·ªÖn ra trong k√™nh n√†y. D√πng l·ªánh `{prefix}stop` ho·∫∑c `/stop` ƒë·ªÉ d·ª´ng game c≈© tr∆∞·ªõc."
            await send_response(msg, ephemeral_flag=True)
            return
        elif "timeout_task" in existing_game_state and existing_game_state["timeout_task"] and not existing_game_state["timeout_task"].done():
             existing_game_state["timeout_task"].cancel() # D·ªçn d·∫πp timeout task n·∫øu game ko active nh∆∞ng task c√≤n

    current_phrase_words: list[str]
    current_phrase_normalized: str
    player_id_for_first_move = author.id 
    participants_since_start = set() 

    sent_game_start_message: discord.Message = None # Message th√¥ng b√°o b·∫Øt ƒë·∫ßu game

    if not start_phrase_input: # Bot ch·ªçn t·ª´
        possible_starts = ["·∫•m √°p", "b·∫ßu tr·ªùi", "d√≤ng s√¥ng", "c√¢y c·∫ßu", "m√°y t√≠nh", "ƒëi·ªán tho·∫°i", "h·ªçc sinh", "sinh vi√™n", "vi√™n ph·∫•n", "nh√† c·ª≠a", "c∆°m n∆∞·ªõc", "xe c·ªô", "t√¨nh y√™u", "h·∫°nh ph√∫c", "n·ªói bu·ªìn", "√°o qu·∫ßn", "qu·∫ßn ƒë·∫£o", "ƒë·∫£o xa"]
        random.shuffle(possible_starts)
        chosen_start_phrase = ""
        for phrase_attempt in possible_starts: # T√¨m t·ª´ h·ª£p l·ªá
            if await wiktionary_api.is_vietnamese_phrase_or_word_valid_api(phrase_attempt, bot.http_session, bot.wiktionary_cache):
                 chosen_start_phrase = phrase_attempt
                 break
        if not chosen_start_phrase: # Ko t√¨m th·∫•y t·ª´ n√†o
            msg = "‚ö†Ô∏è Bot kh√¥ng t√¨m ƒë∆∞·ª£c t·ª´ b·∫Øt ƒë·∫ßu ng·∫´u nhi√™n h·ª£p l·ªá. B·∫°n c√≥ th·ªÉ th·ª≠ b·∫Øt ƒë·∫ßu game b·∫±ng m·ªôt c·ª•m t·ª´ c·ª• th·ªÉ!"
            await send_response(msg, ephemeral_flag=True)
            return

        current_phrase_normalized = chosen_start_phrase
        current_phrase_words = current_phrase_normalized.split()
        original_input_display = " ".join(word.capitalize() for word in current_phrase_words) # Hi·ªÉn th·ªã vi·∫øt hoa
        response_msg_content = f"ü§ñ Bot ƒë√£ ch·ªçn t·ª´ b·∫Øt ƒë·∫ßu: **{original_input_display}**\nüëâ Ch·ªØ c·∫ßn n·ªëi ti·∫øp theo l√†: **{current_phrase_words[1].capitalize()}**"
        
        if interaction: # G·ª≠i response qua interaction
            if interaction.response.is_done(): 
                 sent_game_start_message = await interaction.followup.send(response_msg_content, wait=True)
            else: 
                 await interaction.response.send_message(response_msg_content)
                 sent_game_start_message = await interaction.original_response()
        else: # G·ª≠i qua channel (prefix command)
            sent_game_start_message = await channel.send(response_msg_content)

        player_id_for_first_move = bot.user.id # Bot l√† ng∆∞·ªùi ƒëi ƒë·∫ßu
    else: # Ng∆∞·ªùi ch∆°i cung c·∫•p t·ª´
        original_input_display = start_phrase_input.strip()
        temp_words = utils.get_words_from_input(original_input_display)

        if len(temp_words) != 2: # Ph·∫£i ƒë√∫ng 2 ch·ªØ
            msg = f"‚ö†Ô∏è C·ª•m t·ª´ b·∫Øt ƒë·∫ßu \"**{original_input_display}**\" ph·∫£i c√≥ **ƒë√∫ng 2 ch·ªØ**."
            await send_response(msg, ephemeral_flag=True)
            return

        current_phrase_normalized = f"{temp_words[0]} {temp_words[1]}"
        # Ki·ªÉm tra Wiktionary
        if not await wiktionary_api.is_vietnamese_phrase_or_word_valid_api(current_phrase_normalized, bot.http_session, bot.wiktionary_cache):
            msg = f"‚ö†Ô∏è C·ª•m t·ª´ \"**{original_input_display.title()}**\" kh√¥ng h·ª£p l·ªá theo Wiktionary."
            await send_response(msg, ephemeral_flag=True)
            return
        
        current_phrase_words = temp_words
        capitalized_display = " ".join(w.capitalize() for w in current_phrase_words)
        response_msg_content = f"üéÆ Game ƒë∆∞·ª£c b·∫Øt ƒë·∫ßu b·ªüi {author.mention} v·ªõi c·ª•m t·ª´: **{capitalized_display}**\nüëâ Ch·ªØ c·∫ßn n·ªëi ti·∫øp theo l√†: **{current_phrase_words[1].capitalize()}**"

        if interaction:
            if interaction.response.is_done():
                sent_game_start_message = await interaction.followup.send(response_msg_content, wait=True)
            else:
                await interaction.response.send_message(response_msg_content)
                sent_game_start_message = await interaction.original_response()
        else:
            sent_game_start_message = await channel.send(response_msg_content)
        
        if player_id_for_first_move != bot.user.id: # Ng∆∞·ªùi ch∆°i b·∫Øt ƒë·∫ßu -> th√™m v√†o participants
             participants_since_start.add(player_id_for_first_move)

    # L∆∞u tr·∫°ng th√°i game
    bot.active_games[channel.id] = {
        "current_phrase_str": current_phrase_normalized,
        "word_to_match_next": current_phrase_words[1],
        "used_phrases": {current_phrase_normalized}, # Set c√°c t·ª´ ƒë√£ d√πng
        "last_player_id": player_id_for_first_move,
        "active": True, # Game ƒëang ho·∫°t ƒë·ªông
        "last_correct_message_id": sent_game_start_message.id if sent_game_start_message else 0,
        "timeout_task": None, # Task ki·ªÉm tra timeout
        "participants_since_start": participants_since_start, 
        "timeout_can_be_activated": len(participants_since_start) >= min_p, 
        "guild_id": guild_id, 
        "min_players_for_timeout": min_p 
    }

    game_state = bot.active_games[channel.id]

    # B·∫Øt ƒë·∫ßu timeout n·∫øu ƒë·ªß ng∆∞·ªùi v√† ng∆∞·ªùi ch∆°i ƒëi ƒë·∫ßu (ko ph·∫£i bot)
    if game_state["timeout_can_be_activated"] and player_id_for_first_move != bot.user.id:
        new_timeout_task = asyncio.create_task(
            check_game_timeout( # G·ªçi h√†m check timeout
                bot, channel.id, guild_id,
                game_state["last_player_id"],
                game_state["current_phrase_str"]
            )
        )
        game_state["timeout_task"] = new_timeout_task
        if channel: 
            try: # Th√¥ng b√°o timeout ƒë√£ k√≠ch ho·∫°t
                await channel.send(
                    f"‚ÑπÔ∏è ƒê√£ c√≥ {len(game_state['participants_since_start'])} ng∆∞·ªùi ch∆°i (t·ªëi thi·ªÉu: {min_p}). "
                    f"Th·ªùi gian ch·ªù {timeout_s} gi√¢y cho m·ªói l∆∞·ª£t s·∫Ω ƒë∆∞·ª£c √°p d·ª•ng.",
                    delete_after=20 
                )
            except discord.HTTPException: pass


async def internal_stop_game(bot: commands.Bot, channel: discord.TextChannel, author: discord.User | discord.Member, 
                             guild_id: int, interaction: discord.Interaction = None):
    if channel.id in bot.active_games: # N·∫øu c√≥ game ƒëang ch·∫°y
        game_to_stop = bot.active_games.pop(channel.id) # L·∫•y v√† x√≥a game state

        if "timeout_task" in game_to_stop and game_to_stop["timeout_task"] and not game_to_stop["timeout_task"].done():
            game_to_stop["timeout_task"].cancel() # H·ªßy timeout task
        
        # Reset win streak c·ªßa ng∆∞·ªùi ch∆°i cu·ªëi n·∫øu game b·ªã d·ª´ng ƒë·ªôt ng·ªôt
        if game_to_stop.get("active") and game_to_stop.get("last_player_id") != bot.user.id:
            last_player_id = game_to_stop.get("last_player_id")
            last_player_guild_id = game_to_stop.get("guild_id", guild_id) 
            if last_player_id and last_player_guild_id and bot.db_pool:
                 await database.reset_win_streak_for_user(bot.db_pool, last_player_id, last_player_guild_id)

        embed = discord.Embed(description=f"üëã Game N·ªëi T·ª´ ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi {author.mention}.", color=discord.Color.orange())
        
        guild_cfg_obj = await database.get_guild_config(bot.db_pool, guild_id)
        prefix = guild_cfg_obj.get("command_prefix", bot_cfg.DEFAULT_COMMAND_PREFIX) if guild_cfg_obj else bot_cfg.DEFAULT_COMMAND_PREFIX

        # T·∫°o view v·ªõi n√∫t "Ch∆°i L·∫°i", "Xem BXH"
        view = PostGameView(
            channel=channel, 
            original_starter_id=author.id, 
            command_prefix_for_guild=prefix,
            bot_instance=bot, # Truy·ªÅn bot instance
            internal_start_game_callable=internal_start_game # Truy·ªÅn h√†m ƒë·ªÉ "Ch∆°i L·∫°i"
        )
        
        msg_to_set_view: discord.Message = None
        try: # G·ª≠i tin nh·∫Øn d·ª´ng game
            if interaction:
                if interaction.response.is_done(): 
                    msg_to_set_view = await interaction.followup.send(embed=embed, view=view, wait=True)
                else: 
                    await interaction.response.send_message(embed=embed, view=view)
                    msg_to_set_view = await interaction.original_response()
            else: 
                msg_to_set_view = await channel.send(embed=embed, view=view)
        except discord.HTTPException as e:
            print(f"L·ªói HTTP khi g·ª≠i tin nh·∫Øn d·ª´ng game: {e}")
            if interaction and channel : # Fallback n·∫øu g·ª≠i qua interaction l·ªói
                try: msg_to_set_view = await channel.send(embed=embed, view=view)
                except discord.HTTPException as e_ch: print(f"L·ªói HTTP fallback g·ª≠i tin nh·∫Øn d·ª´ng game: {e_ch}")
        
        if msg_to_set_view: view.message_to_edit = msg_to_set_view # G√°n message cho view

    else: # Ko c√≥ game n√†o
        msg_content = "ü§∑ Hi·ªán kh√¥ng c√≥ game N·ªëi T·ª´ n√†o ƒëang di·ªÖn ra trong k√™nh n√†y."
        if interaction:
            if not interaction.response.is_done(): await interaction.response.send_message(msg_content, ephemeral=True)
            else: await interaction.followup.send(msg_content, ephemeral=True)
        else: await channel.send(msg_content, delete_after=10)


async def process_game_message(bot: commands.Bot, message: discord.Message):
    # X·ª≠ l√Ω tin nh·∫Øn trong game (g·ªçi t·ª´ on_message event)
    channel_id = message.channel.id
    guild_id = message.guild.id 

    if not bot.http_session or bot.http_session.closed: return # Bot ch∆∞a s·∫µn s√†ng
    if not bot.db_pool: return

    if channel_id not in bot.active_games or not bot.active_games[channel_id].get("active", False):
        return # Ko c√≥ game active

    game_state = bot.active_games[channel_id]
    current_player_id = message.author.id
    current_player_name = message.author.name 

    # Ki·ªÉm tra guild_id c·ªßa game state kh·ªõp v·ªõi guild_id c·ªßa message
    if game_state.get("guild_id") != guild_id:
        print(f"L·ªói: Game state k√™nh {channel_id} c√≥ guild_id {game_state.get('guild_id')} ko kh·ªõp {guild_id}.")
        if "timeout_task" in game_state and game_state["timeout_task"] and not game_state["timeout_task"].done():
            game_state["timeout_task"].cancel() # D·ªçn d·∫πp task
        del bot.active_games[channel_id]
        return

    # Ki·ªÉm tra sai l∆∞·ª£t
    if current_player_id == game_state["last_player_id"]:
        try:
            await message.add_reaction(bot_cfg.WRONG_TURN_REACTION)
            guild_cfg_obj = await database.get_guild_config(bot.db_pool, guild_id)
            prefix_val = guild_cfg_obj.get("command_prefix", bot_cfg.DEFAULT_COMMAND_PREFIX) if guild_cfg_obj else bot_cfg.DEFAULT_COMMAND_PREFIX
            
            await message.channel.send(
                f"{bot_cfg.WRONG_TURN_REACTION} {message.author.mention}, b·∫°n v·ª´a ƒëi r·ªìi! H√£y ƒë·ª£i ng∆∞·ªùi kh√°c. "
                f"(D√πng `{prefix_val}stop` ho·∫∑c `/stop` ƒë·ªÉ d·ª´ng).",
                delete_after=bot_cfg.DELETE_WRONG_TURN_MESSAGE_AFTER
            )
            await database.update_stat(bot.db_pool, bot.user.id, current_player_id, guild_id, "wrong_turn", current_player_name)
        except (discord.Forbidden, discord.HTTPException): pass # B·ªè qua n·∫øu ko react/send dc
        return

    user_input_original_str = message.content.strip()
    if not user_input_original_str: return # B·ªè qua msg r·ªóng

    user_phrase_words_lower = utils.get_words_from_input(user_input_original_str)

    if len(user_phrase_words_lower) != 2: # Ko ph·∫£i c·ª•m 2 ch·ªØ th√¨ b·ªè qua
        return

    word1_user, word2_user = user_phrase_words_lower[0], user_phrase_words_lower[1]
    expected_first_word = game_state["word_to_match_next"] # Ch·ªØ ƒë·∫ßu d·ª± ki·∫øn

    error_occurred = False # C·ªù b√°o l·ªói
    error_type_for_stat = None # Lo·∫°i l·ªói ƒë·ªÉ ghi stat

    if word1_user != expected_first_word: # Sai ch·ªØ n·ªëi
        error_occurred = True; error_type_for_stat = "wrong_word_link"
    
    user_phrase_normalized = f"{word1_user} {word2_user}" # T·ª´ chu·∫©n h√≥a

    # Ki·ªÉm tra Wiktionary n·∫øu ch∆∞a c√≥ l·ªói
    if not error_occurred and not await wiktionary_api.is_vietnamese_phrase_or_word_valid_api(user_phrase_normalized, bot.http_session, bot.wiktionary_cache):
        error_occurred = True; error_type_for_stat = "invalid_wiktionary"

    # Ki·ªÉm tra t·ª´ ƒë√£ d√πng n·∫øu ch∆∞a c√≥ l·ªói
    if not error_occurred and user_phrase_normalized in game_state["used_phrases"]:
        error_occurred = True; error_type_for_stat = "used_word_error"

    if error_occurred: # N·∫øu c√≥ l·ªói
        try: await message.add_reaction(bot_cfg.ERROR_REACTION)
        except (discord.Forbidden, discord.HTTPException): pass
        if error_type_for_stat: # C·∫≠p nh·∫≠t stat l·ªói
            await database.update_stat(bot.db_pool, bot.user.id, current_player_id, guild_id, error_type_for_stat, current_player_name)
        return 

    # --- ƒê√öNG L∆Ø·ª¢T ---
    try: await message.add_reaction(bot_cfg.CORRECT_REACTION)
    except (discord.Forbidden, discord.HTTPException): pass
    await database.update_stat(bot.db_pool, bot.user.id, current_player_id, guild_id, "correct_moves", current_player_name)

    # H·ªßy timeout c·ªßa ng∆∞·ªùi ch∆°i tr∆∞·ªõc
    if "timeout_task" in game_state and game_state["timeout_task"] and not game_state["timeout_task"].done():
        game_state["timeout_task"].cancel()

    # C·∫≠p nh·∫≠t game state
    game_state["current_phrase_str"] = user_phrase_normalized
    game_state["word_to_match_next"] = word2_user
    game_state["used_phrases"].add(user_phrase_normalized)
    game_state["last_player_id"] = current_player_id
    game_state["last_correct_message_id"] = message.id

    if current_player_id != bot.user.id: # Th√™m ng∆∞·ªùi ch∆°i v√†o participants
        game_state["participants_since_start"].add(current_player_id)

    timeout_s_config, min_p_config = await utils.get_guild_game_settings(bot, guild_id)
    game_state["min_players_for_timeout"] = min_p_config # C·∫≠p nh·∫≠t min_players (c√≥ th·ªÉ admin ƒë·ªïi gi·ªØa game)

    # K√≠ch ho·∫°t timeout n·∫øu ƒë·ªß ng∆∞·ªùi v√† ch∆∞a active
    if not game_state["timeout_can_be_activated"] and \
       len(game_state["participants_since_start"]) >= game_state["min_players_for_timeout"]:
        game_state["timeout_can_be_activated"] = True
        if msg_channel := bot.get_channel(channel_id): 
            try: # Th√¥ng b√°o timeout k√≠ch ho·∫°t
                await msg_channel.send(
                    f"‚ÑπÔ∏è ƒê√£ c√≥ {len(game_state['participants_since_start'])} ng∆∞·ªùi ch∆°i ({game_state['min_players_for_timeout']} t·ªëi thi·ªÉu). "
                    f"Timeout {timeout_s_config} gi√¢y s·∫Ω √°p d·ª•ng.",
                    delete_after=20
                )
            except discord.HTTPException: pass 

    # B·∫Øt ƒë·∫ßu timeout cho ng∆∞·ªùi ch∆°i hi·ªán t·∫°i n·∫øu timeout_can_be_activated
    if game_state["timeout_can_be_activated"]:
        new_timeout_task = asyncio.create_task(
            check_game_timeout(bot, channel_id, guild_id, game_state["last_player_id"], game_state["current_phrase_str"])
        )
        game_state["timeout_task"] = new_timeout_task